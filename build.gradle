plugins {
    id "base"
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "de.undercouch.download" version "4.0.4"
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
    id 'java'
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: "org.javamodularity.moduleplugin"

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibHttpVersion = project.stdlibHttpVersion
ext.stdlibUrlVersion = project.stdlibUrlVersion
ext.stdlibXmldataVersion = project.stdlibXmldataVersion
ext.puppycrawlCheckstyleVersion = "8.18"

configurations {
    balTools
}

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        mavenLocal()

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    checkstyle {
        toolVersion '8.16'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        exclude excludePattern
    }
}

ext {
    snapshotVersion= '-SNAPSHOT'
    timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
}

dependencies {
    implementation 'io.apicurio:apicurio-data-models:1.1.15'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.5'
    implementation 'commons-io:commons-io:2.11.0'
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
    implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    implementation "io.ballerina.stdlib:http-native:${stdlibHttpVersion}"
    implementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
    implementation "info.picocli:picocli:4.0.1"
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.8.1"
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2' // NEW
    testImplementation "org.testng:testng:7.3.0"

    shadow 'com.google.guava:guava:30.1.1-jre' // NEW
    shadow group: 'org.json', name: 'json', version: '20210307' // NEW
}

shadowJar {
    configurations = [project.configurations.shadow]
}

build.dependsOn(shadowJar)

test {
//    useJUnitPlatform()
//    useTestNG() {
//        suites "src/test/resources/testng.xml"
//    }
    useTestNG()
}

task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled(true)
        html.enabled(true)
        csv.enabled(true)
        xml.destination(new File("${buildDir}/reports/jacoco/report.xml"))
        html.destination(new File("${buildDir}/reports/jacoco/report.html"))
        csv.destination(new File("${buildDir}/reports/jacoco/report.csv"))
    }

    onlyIf = {
        true
    }
}
